let innerDfa=[15, 17, 22, 13, 37, 50, 12, 28, 11, 34, 30, 10, 1, 12, 48, 2, 17, 24, 18, 9, 30, 3, 8, 21, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 0, 7, 4, 5, 6, 9, 8, 14, 6, 16, 22, 19, 6, 7, 17, 20, 7, 7, 7, 16, 7, 25, 7, 7, 4, 29, 31, 23, 7, 7, 6, 17, 26, 31, 33, 36, 36, 43, 26, 32, 32, 32, 32, 32, 32, 35, 46, 47, 39, 40, 33, 33, 33, 33, 33, 33, 45, 38, 36, 39, 49, 31, 39, -1, 30, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 41, 41, 41, 41, 41, 41, 6, -1, -1, -1, -1, 42, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36];
let offset=[0, 1, 0, 2, 24, 3, 30, 1, 1, 5, 21, 0, 26, 4, 8, 42, 13, 12, 27, 0, 33, 37, 51, 52, 57, 47, 54, 57, 50, 46, 33, 75, 86, 34, 69, 57, 37, 70, 76, 49, 122, 133, 169, 205, 242, 56, 277, 92, 79, 92, 61]
let check=[0, 19, 0, 0, 0, 13, 13, 0, 0, 0, 3, 0, 0, 11, 0, 1, 16, 0, 0, 8, 17, 2, 1, 0, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 0, 7, 3, 5, 5, 9, 10, 12, 14, 15, 18, 18, 17, 12, 20, 21, 23, 22, 23, 15, 26, 24, 25, 27, 4, 28, 12, 22, 25, 29, 6, 23, 24, 30, 33, 34, 35, 36, 24, 31, 31, 31, 31, 31, 31, 34, 34, 37, 38, 39, 32, 32, 32, 32, 32, 32, 45, 37, 34, 47, 48, 50, 49, -1, 49, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 49, -1, -1, -1, -1, 41, 41, 41, 41, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46];

let finalState=new Set([7,9,33,44,45]);
let listings=new Map([
    ['0',26],
    ['1',27],
    ['2',28],
    ['3',29],
    ['4',30],
    ['5',31],
    ['6',32],
    ['7',33],
    ['8',34],
    ['9',35],
    [' ',36],
    ['\t',36],
    [',',37]
]);
function isFinal(state) {
    return finalState.has(state);
}
//get index -1 when not found
function getIndex(character) {
    
    if(character>='A'&&character<='Z')
    {
        return character.charCodeAt(0)-'A'.charCodeAt(0);
    }
    else{
        if(listings.has(character)==true)
        {
            return listings.get(character);
        }
        else
        {
            return -1;
        }
    }
}

function nextState(s,i)
{
    if(check[offset[s]+i]==s)   //if the state is derived from the current state
    {
        return innerDfa[offset[s]+i];
    }
    return -1;
}
