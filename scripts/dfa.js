let innerDfa=[15, 17, 22, 13, 37, 50, 12, 28, 11, 34, 30, 10, 1, 12, 48, 51, 17, 24, 18, 2, 9, 3, 8, 21, 16, 30, 8, 5, 5, 5, 5, 5, 5, 17, 16, 20, 0, 7, 4, 5, 6, 7, 7, 7, 7, 7, 7, 9, 14, 6, 7, 38, 7, 6, 7, 22, 19, 7, 25, 7, 23, 7, 7, 4, 29, 7, 31, 31, 7, 26, 33, 36, 17, 43, 36, 26, 47, 6, 32, 32, 32, 32, 32, 32, 35, 46, 38, 39, 40, 33, 33, 33, 33, 33, 33, 45, 39, 36, 49, 31, 17, 39, 54, 30, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 41, 41, 41, 41, 41, 41, 6, 17, -1, -1, -1, 42, 42, 42, 42, 42, 42, 52, -1, -1, -1, -1, -1, 53, -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36]
let offset=[0, 5, 0, 2, 27, 3, 41, 1, 2, 11, 1, 0, 31, 4, 13, 21, 13, 17, 36, 0, 16, 21, 48, 57, 58, 51, 50, 59, 53, 46, 30, 78, 89, 34, 72, 56, 37, 63, 79, 52, 125, 136, 172, 208, 245, 59, 280, 93, 81, 95, 63, 128, 85, 84, 125]
let check=[0, 19, 0, 0, 0, 13, 13, 0, 0, 0, 3, 0, 0, 11, 0, 0, 16, 0, 0, 1, 8, 2, 10, 0, 15, 17, 1, 4, 4, 4, 4, 4, 4, 20, 15, 21, 0, 7, 3, 5, 5, 6, 6, 6, 6, 6, 6, 9, 12, 14, 22, 18, 26, 17, 12, 18, 18, 23, 24, 23, 22, 27, 25, 4, 28, 29, 30, 12, 25, 24, 33, 35, 23, 36, 34, 24, 37, 6, 31, 31, 31, 31, 31, 31, 34, 34, 37, 38, 39, 32, 32, 32, 32, 32, 32, 45, 47, 34, 48, 50, 52, 49, 53, 49, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 49, 54, -1, -1, -1, 41, 41, 41, 41, 41, 41, 51, -1, -1, -1, -1, -1, 51, -1, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46]


let finalState=new Set([7,9,33,44,45]);
let listings=new Map([
    ['0',26],
    ['1',27],
    ['2',28],
    ['3',29],
    ['4',30],
    ['5',31],
    ['6',32],
    ['7',33],
    ['8',34],
    ['9',35],
    [' ',36],
    ['\t',36],
    [',',37]
]);
function isFinal(state) {
    return finalState.has(state);
}
//get index -1 when not found
function getIndex(character) {
    
    if(character>='A'&&character<='Z')
    {
        return character.charCodeAt(0)-'A'.charCodeAt(0);
    }
    else{
        if(listings.has(character)==true)
        {
            return listings.get(character);
        }
        else
        {
            return -1;
        }
    }
}

function nextState(s,i)
{
    if(check[offset[s]+i]==s)   //if the state is derived from the current state
    {
        return innerDfa[offset[s]+i];
    }
    return -1;
}
